1. Идея - сайт с публикацией объявлений (MVT + fullstack)
1.1 Посмотреть аналоги (olx / avito / WB)
1.2 ChatGpt
1.3 Посмотреть профильные статьи
1.4 Чтение книг

2. Функционал

MVT auth:
Регистрация пользователей
Вход в систему

CRUD:
Создание объявления
Редактирование объявления
Управление объявлениями
Поиск объявлений
Фильтрация объявлений

BUILT-IN:
Административная панель

ADDITIONAL:
Отзывы и рейтинги

DESIGN:
Совместимость с мобильными устройствами

2.1 Размещение вакансий
2.2 Поиск и фильтры для вакансий
2.3 Детальный просмотр
2.4 Отзывы
2.5 Рейтинг
2.6 Резюме
2.7 Аналитика

3. Стек
3.1 Backend / Frontend framworks
3.2 MVT(MVC) / backend + frontend  / fullstack
3.3 Railway = легче, но слабее нагрузки / Ps.kz = чуть сложнее, но дороже
3.4 Дизайн и вёрстка

4. Разработка
4.1 Описание основной и вспомогательных сущностей = 
Vacansie(title: str, salary: float, experience: int, work_type: str, company: Foreigh Key, description: str, create: datetime)


from django.db import models
from django.urls import reverse
from django.utils import timezone
from django.contrib.auth.models import User

class Category(models.Model):
    name = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)

    class Meta:
        ordering = ('name',)
        verbose_name = 'category'
        verbose_name_plural = 'categories'

    def __str__(self):
        return self.name

    def get_absolute_url(self):
        return reverse('category_detail', args=[self.slug])

class Ad(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(max_length=200, unique=True)
    category = models.ForeignKey(Category, on_delete=models.CASCADE)
    seller = models.ForeignKey(User, on_delete=models.CASCADE)
    description = models.TextField()
    price = models.DecimalField(max_digits=10, decimal_places=2)
    image = models.ImageField(upload_to='ads/%Y/%m/%d/', blank=True)
    created = models.DateTimeField(default=timezone.now)
    updated = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ('-created',)
        verbose_name = 'ad'
        verbose_name_plural = 'ads'

    def __str__(self):
        return self.title

    def get_absolute_url(self):
        return reverse('ad_detail', args=[self.slug])

4.2 Настроить отображение в admin-panel
4.3 Нужно определиться с маршрутами (endpoints) - 

CRUD:
api/vacansies/list - GET
api/vacansies/detail - GET
api/vacansies/create - POST

api/vacansies/delete - DELETE
api/vacansies/update - PUT

4.4 Написать контроллеры
4.4.1 Пишем функцию с DRF
4.4.2 Берём данные с базы данных через ORM
4.4.3 Пишем сериализаторы (obj => JSON)

4.4... Авторизация: 
	2 вида маршрутов:
	Публичные (AllowAny) - Главная, регистрация, вход... - дают доступ всегда, но пользователь не определён ! ХАОС
	Приватные (IsAuthenticated, IsAdminUser) - api/token/ - отдаёт токен при получении логина и пароля
4.4... Логирование
4.4... Кэширование
4.4... Обработка ошибок



